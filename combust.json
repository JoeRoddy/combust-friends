{
  "dependencies": {
    "users": "latest",
    "notifications": "latest"
  },
  "installation": {
    "src/components/users/SocialContacts.jsx": {
      "imports": ["import FriendsList from \"../friends/FriendsList\";"],
      "after": {
        "pattern": "const componentsByMode = {",
        "code": ["\nFriends: history => <FriendsList history={history} />,"]
      }
    },
    "src/components/users/Profile.jsx": {
      "imports": ["import friendStore from \"../../stores/FriendStore\";"],
      "replace": {
        "pattern": "alert(\"combust install friends\");\n",
        "code": [
          "friendStore.addFriend(userId);",
          "alert('Friend Request Sent');"
        ]
      }
    }
  },
  "installation_mobile": {
    "src/components/users/Profile.js": {
      "imports": ["import friendStore from \"../../stores/FriendStore\";"],
      "replace": [
        {
          "pattern": "alert(\"Execute from your terminal:\", \"combust install friends\");\n",
          "code": [
            "friendStore.addFriend(userId);",
            "alert('Friend Request Sent');"
          ]
        },
        {
          "pattern": "friendType = null",
          "code": ["friendType = friendStore.friendshipStatus(userId)"]
        }
      ]
    },
    "src/components/reusable/SideMenu.js": {
      "after": {
        "pattern": "const COMBUST_MENU_ITEMS = [",
        "code": [
          "{title: \"Friends\",icon: \"person-add\",onPress: () => nav.navigate(\"FriendsList\", { userId: user.id })},"
        ]
      }
    },
    "src/components/Routes.js": {
      "imports": ["import FriendsList from \"./friends/FriendsList\";"],
      "after": {
        "pattern": "const COMBUST_SCREENS = {",
        "code": [
          "FriendsList: { screen: FriendsList, path: \"/FriendsList\" },"
        ]
      }
    }
  },
  "rules": {
    ".read": true,
    "friendshipIdsByUser": {
      "$uid": {
        "$friendshipId": {
          ".write": "!data.exists()"
        }
      }
    },
    "friendships": {
      "$fid": {
        ".write": "!data.exists() || data.child('users').child(auth.uid).exists()"
      }
    }
  }
}
